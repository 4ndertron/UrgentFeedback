WITH EMPLOYEES AS -- TEAM SPECIFIC MEMBERS
    (SELECT E.EMPLOYEE_ID
          , E.FULL_NAME
          , E.BUSINESS_TITLE
          , E.SUPERVISOR_NAME_1 || ' (' || E.SUPERVISOR_BADGE_ID_1 || ')' AS DIRECT_MANAGER
          , E.SUPERVISORY_ORG
          , TO_DATE(NVL(EA.MAX_DT, E.HIRE_DATE))                          AS TEAM_START_DATE
     FROM HR.T_EMPLOYEE E
              LEFT OUTER JOIN -- DETERMINE LAST TIME EACH EMPLOYEE WASN'T ON TARGET MANAGER'S TEAM
         (SELECT EMPLOYEE_ID
               , MAX(EXPIRY_DATE) AS MAX_DT
          FROM HR.T_EMPLOYEE_ALL
          WHERE NOT TERMINATED
            AND (MGR_ID_4 IS DISTINCT FROM '101769' AND MGR_ID_5 IS DISTINCT FROM '101769')
            -- PLACEHOLDER MANAGER (TYLER ANDERSON)
          GROUP BY EMPLOYEE_ID) EA
                              ON E.EMPLOYEE_ID = EA.EMPLOYEE_ID
     WHERE NOT E.TERMINATED
       AND UPPER(E.PAY_RATE_TYPE) = 'HOURLY'
       AND (E.MGR_ID_4 = '101769' OR E.MGR_ID_5 = '101769')
       AND DIRECT_MANAGER ILIKE '%JACO%'
       AND E.EMPLOYEE_ID NOT IN (210521, 202038, 119688, 213011)
    )
   , DATES AS (
    SELECT DT
    FROM RPT.V_DATES
    WHERE DT BETWEEN
              DATEADD(D, -90, CURRENT_DATE) AND
              CURRENT_DATE
)
   , CASES AS -- ACTIVE ESCALATION CASES | CLOSED > TODAY - 30
    (SELECT C.PROJECT_ID
          , C.OWNER_EMPLOYEE_ID
          , C.OWNER
          , C.STATUS
          , C.EXECUTIVE_RESOLUTIONS_ACCEPTED
          , C.CREATED_DATE
          , C.CLOSED_DATE
     FROM RPT.T_CASE AS C
              LEFT JOIN RPT.T_PROJECT AS P
                        ON P.PROJECT_ID = C.PROJECT_ID
              LEFT JOIN EMPLOYEES AS E
                        ON E.EMPLOYEE_ID = C.OWNER_EMPLOYEE_ID
     WHERE E.EMPLOYEE_ID IS NOT NULL
       AND ((UPPER(C.RECORD_TYPE) = 'SOLAR - CUSTOMER ESCALATION'
         AND UPPER(C.STATUS) != 'IN DISPUTE'
         AND C.EXECUTIVE_RESOLUTIONS_ACCEPTED IS NOT NULL)
         OR (UPPER(C.RECORD_TYPE) = 'SOLAR - TRANSFER'
             AND UPPER(C.PRIMARY_REASON) = 'RELOCATION')
         OR (UPPER(C.RECORD_TYPE) = 'SOLAR - CANCELLATION')))
   , CASES_METRICS AS (
    SELECT CA.OWNER_EMPLOYEE_ID
         , D.DT
         , SUM(CASE
                   WHEN CA.CLOSED_DATE >= DATEADD(D, -30, D.DT)
                       THEN 1 END) AS CLOSED
         , AVG(CASE
                   WHEN CA.CLOSED_DATE >= D.DT OR
                        CA.CLOSED_DATE IS NULL
                       THEN DATEDIFF(D, TO_DATE(CA.CREATED_DATE), D.DT)
        END)                       AS AVG_WIP_CYCLE
    FROM EMPLOYEES E
             INNER JOIN CASES CA
                        ON CA.OWNER_EMPLOYEE_ID = E.EMPLOYEE_ID AND
                           NVL(CA.CLOSED_DATE, CURRENT_TIMESTAMP) >= E.TEAM_START_DATE
             INNER JOIN DATES AS D
                        ON D.DT >= E.TEAM_START_DATE
    GROUP BY CA.OWNER_EMPLOYEE_ID, D.DT
    ORDER BY CA.OWNER_EMPLOYEE_ID, D.DT
)
   , QA AS -- CALABRIO QA SCORES
    (
        SELECT EM.EMPLOYEE_ID
             , TO_DATE(QA.EVALUATION_EVALUATED)     AS DT
             , SUM(QA.EVALUATION_TOTAL_SCORE) / 100 AS QA_SCORE_TOTAL
             , COUNT(QA.EVALUATION_TOTAL_SCORE)     AS QA_TALLY
        FROM EMPLOYEES AS EM
                 INNER JOIN CALABRIO.T_PERSONS AS CP
                            ON EM.EMPLOYEE_ID = CP.EMPLOYEE_ID
                 INNER JOIN CALABRIO.T_RECORDING_CONTACT AS QA
                            ON CP.ACD_ID = QA.AGENT_ACD_ID AND
                               QA.EVALUATION_EVALUATED >= EM.TEAM_START_DATE
        WHERE QA.EVALUATION_EVALUATED >= DATEADD(D, -90, CURRENT_DATE)
          AND QA.EVALUATION_EVALUATED < CURRENT_DATE
        GROUP BY EM.EMPLOYEE_ID
               , TO_DATE(QA.EVALUATION_EVALUATED))
   , MAIN AS -- JOINS | AGGREGATIONS
    (SELECT E.EMPLOYEE_ID
          , ANY_VALUE(E.FULL_NAME)         AS FULL_NAME
          , ANY_VALUE(E.TEAM_START_DATE)   AS TEAM_START_DATE
          , D.DT
          , NVL(SUM(CA.CLOSED), 0)         AS EFFECTIVENESS
          , NVL(SUM(CA.AVG_WIP_CYCLE), 0)  AS EFFICIENCY
          , NVL(SUM(QA.QA_SCORE_TOTAL), 0) AS QUALITY_NUM
          , NVL(SUM(QA.QA_TALLY), 0)       AS QUALITY_DENOM
     FROM EMPLOYEES E
              LEFT JOIN DATES AS D
                        ON D.DT >= E.TEAM_START_DATE
              LEFT JOIN CASES_METRICS CA
                        ON CA.OWNER_EMPLOYEE_ID = E.EMPLOYEE_ID AND
                           CA.DT = D.DT
              LEFT JOIN QA
                        ON QA.EMPLOYEE_ID = E.EMPLOYEE_ID AND
                           QA.DT = D.DT
     GROUP BY E.EMPLOYEE_ID, D.DT
     ORDER BY E.EMPLOYEE_ID, D.DT
    )
   , TEST_CTE AS (
    SELECT *
    FROM EMPLOYEES
)
SELECT *
FROM MAIN
